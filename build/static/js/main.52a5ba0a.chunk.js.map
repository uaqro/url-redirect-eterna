{"version":3,"sources":["components/home/Home.js","components/404/NotFound.js","Router.js","serviceWorker.js","index.js"],"names":["Home","randomizer","Math","floor","random","path","component","window","location","href","NotFound","Router","exact","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oOA6EeA,MA1Ef,WACE,IAAMC,EAAaC,KAAKC,MAAsB,EAAhBD,KAAKE,UACnC,OACE,6BACI,WACA,OAAQH,GACN,KAAK,EACH,OACE,kBAAC,IAAD,CACEI,KAAK,IACLC,UAAW,WAET,OADAC,OAAOC,SAASC,KAAO,sCAChB,QAIf,KAAK,EACH,OACE,kBAAC,IAAD,CACEJ,KAAK,IACLC,UAAW,WAET,OADAC,OAAOC,SAASC,KAAO,sCAChB,QAIf,KAAK,EACH,OACE,kBAAC,IAAD,CACEJ,KAAK,IACLC,UAAW,WAET,OADAC,OAAOC,SAASC,KAAO,sCAChB,QAIf,KAAK,EACH,OACE,kBAAC,IAAD,CACEJ,KAAK,IACLC,UAAW,WAET,OADAC,OAAOC,SAASC,KAAO,sCAChB,QAIf,KAAK,EACH,OACE,kBAAC,IAAD,CACEJ,KAAK,IACLC,UAAW,WAET,OADAC,OAAOC,SAASC,KAAO,sCAChB,QAIf,KAAK,EACH,OACE,kBAAC,IAAD,CACEJ,KAAK,IACLC,UAAW,WAET,OADAC,OAAOC,SAASC,KAAO,sCAChB,QAIf,QACE,OAAO,sCA/DX,KCGOC,MARf,WACE,OACE,6BACE,2CCSSC,EATA,kBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACP,KAAK,IAAIC,UAAWN,IACjC,kBAAC,IAAD,CAAOM,UAAWI,OCGJG,QACW,cAA7BN,OAAOC,SAASM,UAEe,UAA7BP,OAAOC,SAASM,UAEhBP,OAAOC,SAASM,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SD2H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.52a5ba0a.chunk.js","sourcesContent":["import React from \"react\";\nimport { Route } from \"react-router-dom\";\n\nfunction Home() {\n  const randomizer = Math.floor(Math.random() * 6);\n  return (\n    <div>\n      {(() => {\n        switch (randomizer) {\n          case 1:\n            return (\n              <Route\n                path=\"/\"\n                component={() => {\n                  window.location.href = \"https://forms.gle/1szPPqG5SbeArzyMA\";\n                  return null;\n                }}\n              />\n            );\n          case 2:\n            return (\n              <Route\n                path=\"/\"\n                component={() => {\n                  window.location.href = \"https://forms.gle/4JvnkVrm5zD9k4BY7\";\n                  return null;\n                }}\n              />\n            );\n          case 3:\n            return (\n              <Route\n                path=\"/\"\n                component={() => {\n                  window.location.href = \"https://forms.gle/HKWuE8MzXhDcQywGA\";\n                  return null;\n                }}\n              />\n            );\n          case 4:\n            return (\n              <Route\n                path=\"/\"\n                component={() => {\n                  window.location.href = \"https://forms.gle/A48hZtN27zWXm9DKA\";\n                  return null;\n                }}\n              />\n            );\n          case 5:\n            return (\n              <Route\n                path=\"/\"\n                component={() => {\n                  window.location.href = \"https://forms.gle/4dgBNj6FCnK3E7j57\";\n                  return null;\n                }}\n              />\n            );\n          case 6:\n            return (\n              <Route\n                path=\"/\"\n                component={() => {\n                  window.location.href = \"https://forms.gle/ZzNRi6buVQENgvdb7\";\n                  return null;\n                }}\n              />\n            );\n          default:\n            return <h1>Error</h1>;\n        }\n      })()}\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\n\nfunction NotFound() {\n  return (\n    <div>\n      <h2>Not found</h2>\n    </div>\n  );\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Home from './components/home/Home';\nimport NotFound from './components/404/NotFound.js';\n\nconst Router = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Router;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Router from './Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}